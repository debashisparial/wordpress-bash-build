#!/usr/bin/env bash

export NCURSES_NO_UTF8_ACS=1
############################ Nginx Installation #############################################################
hostname="$(hostname)"
domain="${hostname#*.}"
ips=$(curl -s -X GET https://checkip.amazonaws.com)
uname="$(whoami)"
uhome=$(eval echo ~$uname)
wproc=$(nproc --all)
wconn=$(ulimit -n)
wconn=$(($wproc*$wconn))
nginx_install() {
	msgs=( "System update started...."
	"Nginx repo added...."
	"System update..."
	"System upgrade in progress..."
	"Nginx Extras with cache-purge installation initiated..."
	"Initiating Nginx...."
	"Initiating Nginx...."
	"Nginx initiated successfully..."
		 )
	commands=(
	'sudo apt-get update'
	'sudo DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:ondrej/nginx'
	'sudo apt-get update'
	'sudo DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade'
	'sudo DEBIAN_FRONTEND=noninteractive apt-get -y install nginx-extras'
	'sudo systemctl enable nginx'
	'sudo systemctl restart nginx'
	'sudo systemctl reload nginx'
			 )
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nNginx install status - success!\nXXX" #if progress percentage is equal to 100% then show this message
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands, 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "Nginx Installation" --gauge "System Update..." 20 100 0
}
nginx_config() {
	msgs=( "Nginx configuration file..."
	"Nginx config updated...."
	"Nginx reload..."
	"Nginx restart..."
		 )
	commands=(
	'sudo wget -q https://raw.githubusercontent.com/debashisparial/wordpress-bash-build/main/nginx.conf -O /etc/nginx/nginx.conf'
	'sudo sed -i "s/\(user \).*/\1${uname};/;s/\(worker_processes \).*/\1${wproc};/;s/\(worker_connections \).*/\1${wconn};/" /etc/nginx/nginx.conf'
	'sudo systemctl reload nginx'
	'sudo systemctl restart nginx'
			)
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nUFW & Fail2ban installed & activated successfully!\nXXX" #if progress percentage is equal to 100% then show this message
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "Nginx Configuration" --gauge "System update....." 20 100 0
}
firewall_install() {
	msgs=( "System update started...."
	"UFW installation started...."
	"Allow TCP Port 80/443"
	"Allow SSH Port 22"
	"UFW enabled...."
	"UFW reload...."
	"Fail2ban installation started...."
	"Fail2ban enabled...."
	"Fail2ban enabled...."
		 )
	commands=(
	"sudo apt-get update"
	"sudo apt-get install ufw"                                                                            
	"sudo ufw allow 'Nginx Full'"
	"sudo ufw allow 'OpenSSH'"
	"sudo ufw --force enable"
	"sudo ufw reload"
	"sudo apt-get -y install fail2ban"
	"sudo systemctl enable fail2ban"
	"sudo systemctl start fail2ban" 
			 )
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nUFW & Fail2ban installed & activated successfully!\nXXX" #if progress percentage is equal to 100% then show this message
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "UFW & Fail2ban Installation" --gauge "System update....." 20 100 0
}
mariadb_install() {
	BACKTITLE="Wordpress Installation"
	TITLE="Mariadb Installation"
	MENU="Choose one of the following Mariadb versions:"

	OPTIONS=("Mariadb 10.6" ""
		 "Mariadb 10.5" ""
		 "Mariadb 10.4" ""
		 "Mariadb 10.3" "")

	CHOICE=$(dialog --cr-wrap --keep-tite --backtitle "$BACKTITLE" --title "$TITLE" --nocancel --menu "$MENU" 20 70 0 "${OPTIONS[@]}" 2>&1 >$TERMINAL)

	clear
	case $CHOICE in
		"Mariadb 10.6")
				mver=10.6
				;;
		"Mariadb 10.5")
				mver=10.5
				;;
		"Mariadb 10.4")
				mver=10.4
				;;
		"Mariadb 10.3")
				mver=10.3
				;;
	esac
	msgs=( "Mariadb repo download"
	"Mariadb repo setup..."
	"System update..."
	"Installing Mariadb"
		 )
	commands=(
	'curl -LO -s https://downloads.mariadb.com/MariaDB/mariadb_repo_setup'
	'sudo bash mariadb_repo_setup -- --mariadb-server-version="\""${mver}"\""'
	'sudo apt-get -y update'
	'sudo DEBIAN_FRONTEND=noninteractive apt-get -y install mariadb-server'
			 )
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nMariadb installed successfully!\nXXX" #if progress percentage is equal to 100% then show this message
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands, 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "Mariadb Installation" --gauge "Mariadb repo download" 20 100 0
}
mariadb_secure() {
	msgs=('\nDisallow root login remotely'
	'\nRemove anonymous users'
	'\nRemove test database and access to it'
	'\nReload privilege tables'
	'\nInitializing Mariadb...'
	'\nRestart Mariadb'
		)
	commands=('sudo mysql -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"'
	'sudo mysql -e "DELETE FROM mysql.user WHERE User='';"'
	'sudo mysql -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';"'
	'sudo mysql -e "FLUSH PRIVILEGES;"'
	'sudo systemctl enable mariadb'
	'sudo systemctl restart mariadb'
			)
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nMariadb secure installation completed!\nXXX"
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands, 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "Mariadb Secure Installation" --gauge "\nDisallow root login remotely" 20 100 0
}
php-fpm_install() {
	BACKTITLE="Wordpress Installation"
	TITLE="PHP-fpm Installation"
	MENU="Choose one of the following Mariadb versions:"
	OPTIONS=("PHP 8.0" ""
			 "PHP 7.4" ""
			 "PHP 7.3" "" )

	CHOICE=$(dialog --cr-wrap --keep-tite --backtitle "$BACKTITLE" --title "$TITLE" --nocancel --menu "$MENU" 20 70 0 "${OPTIONS[@]}" 2>&1 > /dev/tty)

	clear
	case $CHOICE in
		"PHP 8.0")
				pvar="8.0"
				;;
		"PHP 7.4")
				pvar="7.4"
				;;
		"PHP 7.3")
				pvar="7.3"
				;;
	esac
	pver="php${pvar}"
	msgs=( "System update started...."
	"PHP repo added...."
	"System update..."
	"System upgrade in progress..."
	"PHP-fpm installation initiated..."
	"Starting PHP-fpm...."
	"PHP-fpm started successfully..."
		 )
	commands=(
	'sudo apt-get update'
	'sudo DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:ondrej/php'
	'sudo apt-get update'
	'sudo DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade'
	'sudo apt-get -y install "${pver}-fpm" "${pver}-common" php-pear "${pver}-dev" "${pver}-curl" "${pver}-xmlrpc" "${pver}-cli" "${pver}-mbstring" "${pver}-gd" "${pver}-intl" "${pver}-mysql" "${pver}-imagick" "${pver}-opcache" "${pver}-soap" "${pver}-redis" "${pver}-zip" "${pver}-imap" "${pver}-xml"'
	'sudo systemctl restart "${pver}-fpm"'
	'sudo systemctl reload "${pver}-fpm"'
			 )
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nPHP-fpm installed successfully!\nXXX" #if progress percentage is equal to 100% then show this message
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "PHP-fpm Installation" --gauge "System update....." 20 100 0
}
phpini_config() {
	exe_time=""
	in_vars=""
	mem_limit=""
	max_fil=""
	max_pos=""
	# open fd
	exec 3>&1

	# Store data to $pini variable
	pini=$(dialog --cr-wrap \
		--ok-label "Submit" \
		--keep-tite \
		--title "php.ini configure" \
		--nocancel \
		--form "Configure php.ini" \
	20 100 0 \
			"Execution Time:"     1 1   "$exe_time"     1 20 15 0\
			"Input Variables:"    2 1   "$in_vars"      2 20 15 0 \
			"Memory Limit:"       3 1   "$mem_limit"    3 20 15 0 \
			"Max File Size:"      4 1   "$max_fil"      4 20 15 0 \
			"Max Post Size:"      5 1   "$max_pos"      5 20 15 0 \
	2>&1 1>&3)
	# close fd
	exec 3>&-
	maxex=$( echo "$pini" | sed -n '1p' )
	invars=$( echo "$pini" | sed -n '2p' )
	memlim=$( echo "$pini" | sed -n '3p' )
	maxfil=$( echo "$pini" | sed -n '4p' )
	maxpos=$( echo "$pini" | sed -n '2p' )
	sudo sed -i "/^${maxex}/!s/^;*\(max_execution_time = \).*/\1${maxex}/
			/^${invars}/!s/^;*\(max_input_vars = \).*/\1${invars}/
			/^${memlim}/!s/^;*\(memory_limit = \).*/\1${memlim}M/
			/^${maxfil}/!s/^;*\(max_file_size = \).*/\1${maxfil}/
			/^${maxpos}/!s/^;*\(max_post_size = \).*/\1${maxpos}/" /etc/php/${pvar}/fpm/php.ini
	sudo sed -i "s/www-data/$uname/g;s/^;*\(listen.mode = 0660 \).*/\1/" /etc/php/${pvar}/fpm/pool.d/www.conf
}
site_dir() {
	msgs=("Creating domain directory"
	"Creating domain logs directory"
	"Changing domain directory permissions"
	"Configuring sites-available"
	"Processing sites-available"
	"Creating symlinks"
	"Reload Nginx"
	"Restart Nginx"
		)
	commands=('mkdir ${domain}'
	'mkdir ${domain}/logs'
	'chmod -R 755 ${domain}'
	'sudo wget -q https://raw.githubusercontent.com/debashisparial/wordpress-bash-build/main/server.conf -O /etc/nginx/sites-available/${domain}'
	'sudo sed -i "s/tld/${domain}/g;s/userhome/${uhome}/g;s/pver/${pver}/g" /etc/nginx/sites-available/${domain}'
	'sudo ln -s /etc/nginx/sites-available/"$domain" /etc/nginx/sites-enabled/"$domain"'
	'sudo systemctl reload nginx'
	'sudo systemctl restart nginx'
			)
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nDomain directory created successfully!\nXXX"
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "Domain directory creation" --gauge "Creating domain directory" 20 100 0
}
var_db() {
	pfx=$(shuf -zer -n2 {a..z} | tr -d '\0')
	vnum=$(shuf -i 8-11 -n 1)
	sfx=$(openssl rand -base64 32 | tr -d /=+ | cut -c -"$vnum")
	varnam="${pfx}_${sfx}"
	echo "$varnam"
}
site_db() {
	dbname=$(var_db)
	userdb=$(var_db)
	vnum=$(shuf -i 12-15 -n 1)
	passdb=$(openssl rand -base64 32 | tr -d /=+ | cut -c -"$vnum")
	msgs=('\nSite database created'
	'\nDatabase user created'
	'\nAll privileges granted on database to user'
	'\nReload privilege tables'
	'\nRestart Mariadb'
		)
	commands=('sudo mysql -e "CREATE DATABASE ${dbname};"'
	'sudo mysql -e "CREATE USER ${userdb}@localhost IDENTIFIED BY '${passdb}';"'
	'sudo mysql -e "GRANT ALL PRIVILEGES ON ${dbname}.* TO '${userdb}'@'localhost';"'
	'sudo mysql -e "FLUSH PRIVILEGES;"'
	'sudo systemctl restart mariadb'
			)
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nMariadb secure installation completed!\nXXX"
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands, 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "Site database configuration" --gauge "\nSite database created" 20 100 0
}
wp_install() {
	while true; do
	  site_title=$(dialog --cr-wrap --keep-tite --title "Site Title" --ok-label "Continue" --nocancel --inputbox "Enter Site Title" 20 100 3>&1 1>&2 2>&3 3>&-)
	  if [[ -z "$site_title" ]]; then
		dialog --cr-wrap --keep-tite --title "ERROR!!" --ok-label "Continue" --nocancel --msgbox "\n Error! Site Title cannot be empty" 20 100 
		continue
	  fi
	  break
	done
	while true; do
	  admin_user=$(dialog --cr-wrap --keep-tite --title "Admin Username" --ok-label "Continue" --nocancel --inputbox "\nEnter Wordpress Admin Username" 20 100 3>&1 1>&2 2>&3 3>&-)
	  if [[ -z "$admin_user" ]]; then
		dialog --cr-wrap --keep-tite --title "ERROR!!" --ok-label "Continue" --nocancel --msgbox "\n Error! Admin Username cannot be empty" 20 100 
		continue
	  fi
	  break
	done
	pattern="(^(.{0,15}|[^0-9]*|[^A-Z]*|[^a-z]*|[^a-zA-Z0-9]*|[^\s]*\s.*)$)"
	while true; do
	  admin_pass=$(dialog --cr-wrap --keep-tite --title "Admin Password" --ok-label "Continue" --nocancel --inputbox "\n\nEnter Wordpress Admin password\nMinimum 16 characters\nAt least One Upper case\nAt least One Lower Case\nAt least one number" 20 100 3>&1 1>&2 2>&3 3>&-)
	  if [[ -z "$admin_pass" ]]; then
		dialog --cr-wrap --keep-tite --title "ERROR!!" --ok-label "Continue" --nocancel --msgbox "\nError! Password cannot be empty" 20 100 
		continue
	  elif [[ "${admin_pass}" =~ ${pattern} ]]; then
		dialog --cr-wrap --keep-tite --title "ERROR!!" --ok-label "Continue" --nocancel --msgbox "\nError! Format incorrect" 20 100
		continue
	  fi
	  break
	done
	while true; do
	  admin_mail=$(dialog --cr-wrap --keep-tite --title "Admin Email" --ok-label "Continue" --nocancel --inputbox "Enter Wordpress Admin email" 20 100 3>&1 1>&2 2>&3 3>&-)
	  if [[ -z "$admin_mail" ]]; then
		dialog --cr-wrap --keep-tite --title "ERROR!!" --ok-label "Continue" --nocancel --msgbox "\nError! Admin Email cannot be empty" 20 100 
		continue
	  fi
	  break
	done
	msgs=('\nWP Cli download...'
	'\nWP Cli permissions update....'
	'\nWP Cli Moved directory'
	'\nChanged to domain directory...'
	'\nWordpress core download...'
	'\nDatabase connection established'
	'\nWordpress Installation initiated...'
		)
	commands=('curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar'
	'chmod +x wp-cli.phar'
	'sudo mv wp-cli.phar /usr/local/bin/wp'
	'cd ~/"$domain"/'
	'wp core download'
	'wp core config --dbname=$dbname --dbuser=$userdb --dbpass=$passdb'
	'wp core install --url="$domain" --title="$site_title" --admin_user="$admin_user" --admin_password="$admin_pass" --admin_email="$admin_mail"'
			)
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nWordpress installed successfully!\nXXX"
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands, 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "Site database configuration" --gauge "\nWP Cli download" 20 100 0
}
ssl_install() {
	msgs=('\nSite database created'
	'\nDatabase user created'
	'\nAll privileges granted on database to user'
	'\nReload privilege tables'
	'\nRestart Mariadb'
		)
	commands=( 'sudo DEBIAN_FRONTEND=noninteractive snap -y install core'
	'sudo snap refresh core'
	'sudo DEBIAN_FRONTEND=noninteractive snap -y install --classic certbot'
	'sudo ln -s /snap/bin/certbot /usr/bin/certbot'
	'sudo certbot --noninteractive --agree-tos --no-eff-email --cert-name $domain --nginx --redirect -d $domain -d $cname --register-unsafely-without-email --webroot -w $uhome/$domain/'
			)
	n=${#commands[@]}
	i=0
	while [ "$i" -le "$n" ]; do
		pct=$(( i * 100 / n )) # calculating progress percentage
		if [ $pct -eq 100 ]; then
			echo -e "XXX\n100\nLetsEncrypt SSL completed!\nXXX"
		else
			echo -e "XXX\n$i\n${msgs[i]}\nXXX"
		fi
		echo "$pct"
		eval "${commands[i]}" > /dev/null 2>&1 #eval the output of the commands, 
		i=$((i + 1))
		sleep 2
	done | dialog --cr-wrap --keep-tite --title "Site database configuration" --gauge "\nSite database created" 20 100 0
}	
main() {
	nslook=$(dig ns +short "${domain}")
	if [[ ${nslook} = *cloudflare* ]]; then
		while true; do
			cf_auth_key=$(dialog --cr-wrap --keep-tite --title "Cloudflare Auth Key" --ok-label "Continue" --nocancel --inputbox "\nEnter your Cloudflare Auth Key" 20 100 3>&1 1>&2 2>&3 3>&-)
			cf_auth_email=$(dialog --cr-wrap --keep-tite --title "Cloudflare Email" --ok-label "Continue" --nocancel --inputbox "\nEnter your Cloudflare Email" 20 100 3>&1 1>&2 2>&3 3>&-)
			zone="$domain"
			result=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$zone" \
				-H "X-Auth-Email: $cf_auth_email" \
				-H "X-Auth-Key: $cf_auth_key" \
				-H "Content-Type: application/json" | jq -r '{"success"}[]')
			if [ "$result" = false ] ; then
				dialog --cr-wrap --keep-tite --title "ERROR!!" --ok-label "Continue" --nocancel --msgbox "\n Error! Incorrect Cloudflare Key or Email. Please try again." 20 100 
				continue
			fi
			break
		done
		zoneid=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$zone&status=active" \
		  -H "X-Auth-Email: $cf_auth_email" \
		  -H "X-Auth-Key: $cf_auth_key" \
		  -H "Content-Type: application/json" | jq -r '{"result"}[] | .[0] | .id')
		  
		# get the dns record id
		a_id=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records?type=A&name=$zone" \
		  -H "X-Auth-Email: $cf_auth_email" \
		  -H "X-Auth-Key: $cf_auth_key" \
		  -H "Content-Type: application/json" | jq -r '{"result"}[] | .[0] | .id')

		ip_check=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records?type=A&name=$zone" \
			  -H "X-Auth-Email: $cf_auth_email" \
			  -H "X-Auth-Key: $cf_auth_key" \
			  -H "Content-Type: application/json" | jq -r '{"result"}[] | .[0] | .content')
		if [[ "$ips" != "$ip_check" ]]; then
		# update the record
			curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records/$a_id" \
			  -H "X-Auth-Email: $cf_auth_email" \
			  -H "X-Auth-Key: $cf_auth_key" \
			  -H "Content-Type: application/json" \
			  --data "{\"type\":\"A\",\"name\":\"$zone\",\"content\":\"$ips\",\"ttl\":1,\"proxied\":true}" | jq > /dev/null 2>&1
		elif [[ "$ips_check" = null ]]; then 
			curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records/$a_id" \
			  -H "X-Auth-Email: $cf_auth_email" \
			  -H "X-Auth-Key: $cf_auth_key" \
			  -H "Content-Type: application/json" \
			  --data "{\"type\":\"A\",\"name\":\"$zone\",\"content\":\"$ips\",\"ttl\":1,\"proxied\":true}" | jq > /dev/null 2>&1
		fi
		cname_id=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records?type=CNAME&name=$cname" \
			  -H "X-Auth-Email: $cf_auth_email" \
			  -H "X-Auth-Key: $cf_auth_key" \
			  -H "Content-Type: application/json" | jq -r '{"result"}[] | .[0] | .id')
	        if [[ "$cname_id" = null ]]; then
			curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$zoneid/dns_records" \
			  -H "X-Auth-Email: $cf_auth_email" \
			  -H "X-Auth-Key: $cf_auth_key" \
			  -H "Content-Type: application/json" \
			  --data "{\"type\":\"CNAME\",\"name\":\"$cname\",\"content\":\"$zone\",\"ttl\":1,\"proxied\":true}" | jq > /dev/null 2>&1
	        fi
		curl -s -X PATCH 'https://api.cloudflare.com/client/v4/zones/$zoneid/settings/ssl' \
		  -H "X-Auth-Email: $cf_auth_email" \
		  -H "X-Auth-Key: $cf_auth_key" \
		  -H "Content-Type: application/json" \
		  --data-raw '{
		  "value":"flexible"
			}' | jq > /dev/null 2>&1
		nginx_install
		nginx_config
		firewall_install
		mariadb_install
		mariadb_secure
		php-fpm_install
		phpini_config
		site_dir
		site_db
		wp_install
		ssl_install
	else
		nginx_install
		nginx_config
		firewall_install
		mariadb_install
		mariadb_secure
		php-fpm_install
		phpini_config
		site_dir
		site_db
		wp_install
		ssl_install
	fi
}
main
